jobs:
  include:
   - stage: Build
     language: csharp
     dist: xenial
     mono: none
     dotnet: 3.1
     install: 
       - dotnet clean
       - dotnet restore
     script:
       - dotnet build 

   - stage: Unit tests
     language: node_js
     node_js:
       - 12.15.0
     before_install:
       - cd Chat.Web/Client/
     install:
       - npm install
     script:
       - npm test

    - stage: Integration tests
      language: csharp
      mono: none
      dotnet: 3.1
      addons:
        chrome: stable
      services:
        - xvfb
      before_script:
        - export DISPLAY=:99.0
      script:
        - dotnet --version
        - make start-test
        - bash Scripts/wait-until-service-is-up.sh
        - xvfb-run --auto-servernum --server-num=1 --server-args="-screen 0 1024x768x24" dotnet test Chat.Tests.Integration

    - stage: Deploy
      language: minimal
      services:
        - docker
      env:
        - RELEASE_NUMBER=1.0.$TRAVIS_BUILD_NUMBER
      script:
        - docker build --file ./Dockerfile . --tag framebassman/chat:$RELEASE_NUMBER
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push framebassman/chat
      before_deploy:
        - git config --local user.name $GIT_USERNAME
        - git config --local user.email $GIT_EMAIL
        - git tag $RELEASE_NUMBER
      deploy:
        provider: releases
        api_key: $GITHUB_OAUTH_TOKEN
        skip_cleanup: true

stages:
  - Build
  - Unit tests
  - Integration tests
  - name: Deploy
    if: branch = master AND type != pull_request
branches:
  only:
    - /.*/
notifications:
  email: false
  slack: $SLACK_TOKEN
